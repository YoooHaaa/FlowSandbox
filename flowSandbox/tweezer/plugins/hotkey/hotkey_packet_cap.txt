# coding=utf-8

import os

import keyboard

from tweezer.core.runtime_event import RuntimeEvent, RuntimeEventType
from wisbec import system
from wisbec.filesystem.filesystem import FilesystemUtil
from wisbec.logging.log import Log

from tweezer.config.config import Configor
from tweezer.core.screen_cap import ScreenCap
from tweezer.plugins.base.base_hotkey_plugin import BaseHotkeyPlugin
from tweezer.resource import constant
from tweezer.resource.resource import CwdResource
from tweezer.resource.runtime import Runtime
from tweezer.util.output import OutputUtil


class HotkeyPacketCap(BaseHotkeyPlugin):

    def register_event(self):
        RuntimeEvent().reg_event(event_type=RuntimeEventType.RESPONSE, callback=self.__cb_response)
        RuntimeEvent().reg_event(event_type=RuntimeEventType.SWITCHED_APP, callback=self.__cb_switched_app)

    def run(self):
        self.register_event()

    def __init__(self):
        BaseHotkeyPlugin.__init__(self)
        self.m_top_app = ''
        self.m_packets_cache = []
        self.m_hotkey_packet_cap_conf = Configor.get_hotkey_packet_cap_conf()
        self.m_packet_cache_size = self.m_hotkey_packet_cap_conf['packet_cache_size']
        self.__register_system_key_bind()

    def __packet_cap(self):
        Log.info('正在保存中....')

        if not self.m_top_app:
            Log.error('顶层没有有效的应用, 无法保存！')
            return False

        if len(self.m_packets_cache) == 0:
            Log.error('未收到数据包, 无法保存！')
            return False

        # output dir
        output_dir = os.path.join(CwdResource.get_plugin_output_path(), constant.MANUAL_SCREENSHOT_OUTPUT_DIR,
                                  self.m_top_app)
        FilesystemUtil.create_directories(output_dir)

        # screen cap
        screenshot_path = os.path.join(output_dir, 'tweezer_manual_cap_screenshot.png')
        device_id = Runtime().device_id

        if ScreenCap.capture(device_id, screenshot_path) is False:
            return False
        OutputUtil.save_plugin_output(screenshots=[screenshot_path],
                                      url='',
                                      match_category=HotkeyPacketCap.__name__,
                                      flows=self.m_packets_cache,
                                      output_dir=output_dir)
        Log.info('保存成功, 共抓取 {} 个封包.', len(self.m_packets_cache))
        self.__clear_cache()
        return True

    def __into_cache(self, flow):
        if len(self.m_packets_cache) == self.m_packet_cache_size:
            del self.m_packets_cache[0]
            self.m_packets_cache.append(flow)
        else:
            self.m_packets_cache.append(flow)

    def __clear_cache(self):
        self.m_packets_cache.clear()

    def __cb_switched_app(self, event_type, **kwargs):
        self.m_top_app = kwargs['pkg']
        self.__clear_cache()

    def __cb_response(self, event_type, **kwargs):
        if not self.m_top_app:
            return  # not ready, ignore
        self.__into_cache(kwargs['flow'])

    def __register_system_key_bind(self):
        shortcut = self.m_hotkey_packet_cap_conf['shortcut']
        if shortcut == 'default':
            if system.is_mac_os():
                shortcut = 'command+c'
            else:
                shortcut = 'alt+c'
        if self.is_shortcut_valid(shortcut):
            keyboard.add_hotkey(shortcut, self.__packet_cap)
            Log.info("热键注册成功, 按下{}进行抓取数据", shortcut)
        else:
            Log.error("热键{}绑定不可用，请重新设置或使用默认设置", shortcut)
